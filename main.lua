local grp = require 'grp'

local helpmsg = [=[

Gas Report Parser

Usage: lua main.lua <command> [args...]

Commands:

  parse [<fmt>]
    Parses a gas report, and produces an
    abstract syntax tree in the form of
    a Lua table.
    Option <fmt> can be: forge, hardhat
    By default, tries to detect <fmt>.

  diff <a> [<b>]
    Produces a diff between two Lua tables
    saved in files <a> and <b> in terms of
    absolute and relative difference.
    By default, <b> is standard input.

  printdiff
    Prints a Markdown table representing
    the difference in gas usage from a Lua
    table generated by the differ.
]=]

local function help (s)
    error(s .. '\n' .. helpmsg)
end

local function assert (condition, message)
    return condition or help(message)
end

local function printluatable (t)
    io.write('return ' .. grp.util:serialize(t) .. '\n')
end

local parsers = {
    forge = grp.forge.parse,
    hardhat = grp.hardhat.parse,
}

local function getastscore (ast)
    local score = 0
    for entry in pairs(ast) do
        score = score + 1
    end
    return score
end

local function choosebestast (asts)
    local bestast
    local bestscore
    for i, ast in pairs(asts) do
        local score = getastscore(ast)
        if bestscore == nil or score > bestscore then
            bestast = ast
            bestscore = score
        end
    end
    return bestast
end

local function parsereport (report, fmt)
    local ast
    if fmt == nil then
        local asts = {}
        for fmt, parser in pairs(parsers) do
            asts[fmt] = parser(report)
        end
        ast = choosebestast(asts)
    else
        local parser = assert(parsers[fmt], 'invalid <fmt>: ' .. fmt)
        ast = parser(report)
    end
    return assert(ast, 'failed parsing')
end

if arg then
    assert(arg[1], 'expected <command>')
    if arg[1] == 'parse' then
        local rep = io.read('a')
        local t = parsereport(rep, arg[2])
        printluatable(t)
    elseif arg[1] == 'diff' then
        local ta = loadfile(assert(arg[2], 'expected <a>'))()
        local tb = loadfile(arg[3])()
        local td = grp.diff:difftables(ta, tb)
        printluatable(td)
    elseif arg[1] == 'printdiff' then
        local td = load(io.read('a'))()
        grp.diff:printdiff(td)
    else
        help('invalid <command>: ' .. arg[1])
    end
end
